#+TITLE: clang-tags -- Quick start guide
#+SETUPFILE: setup.org

* Set the system up

  These steps are necessary to use =clang-tags=.

  If you have't installed `clang-tags` in a standard location in the system,
  you should source the proper environment before running the following
  commands (see the [[id:9919342a-dc4f-48b9-be0e-8c3f60b89a00][installation guide]] for more details):

  #+BEGIN_SRC sh
    source path/to/clang-tags/build/env.sh
  #+END_SRC

** Run the server
   #+BEGIN_SRC sh
     cd /path/to/build-dir
     rm -f /tmp/clang-tags
     clang-tags-server >.ct.log &
   #+END_SRC

** Build the compilation database
   
   This should be done every time the project configuration changes (list of
   source files, compiler switches, ...):
   #+include: "../tests/ct-trace" src sh :lines "3-"
   #+include: "../../build/tests/ct-trace.out" src fundamental
  
** Load the compilation database
   
   After the compilation database has been generated (at the previous step), it
   should be loaded into the system:
   #+include: "../tests/ct-load" src sh :lines "3-"
   #+include: "../../build/tests/ct-load.out" src fundamental
  
** Index the source files

   The first time =clang-tags= is used for a project, the full sources should
   be indexed:
   #+include: "../tests/ct-index" src sh :lines "3-"
   #+include: "../../build/tests/ct-index.out" src fundamental

   After source files change, the source index can be updated, which saves some
   time by only reparsing new content:
   #+BEGIN_SRC sh
     clang-tags update
   #+END_SRC
   #+include: "../../build/tests/ct-index.out" src fundamental


* Try the command-line interface

  This section show how to use the command-line interface to query `clang-tags`
  about symbol definitions and references in the source files. You can safely
  skip to the next section if you plan to only use the Emacs interface.
 
** Find symbol definitions

   Find the definition location of the identifier located in =main.cxx= at offset
   849:
   #+include: "../tests/ct-find-def-r" src sh :lines "3-"
   #+include: "../../build/tests/ct-find-def-r.out" src ct/find-def-rw
  
** Find symbol references

   Find all uses of the =Cursor::location()= method (identified by its USR, as
   given in the second result of =clang-tags find-def= above):
   #+include: "../tests/ct-grep" src sh :lines "3-"
   #+include: "../../build/tests/ct-grep.out" src grep-rw


* Try the Emacs interface
  :PROPERTIES:
  :ID:       f35b7f1e-9992-4bf0-a096-8923f18277e4
  :END:

  If you haven't configured Emacs to use `clang-tags`, you should load the
  correct environment (see the [[id:9919342a-dc4f-48b9-be0e-8c3f60b89a00][installation guide]] for more details):

  =M-x load-file RET /path/to/clang-tags/build/env.el RET=
  
** Activate =clang-tags-mode=

   Open any source file in the project, and activate =clang-tags-mode=:
  
   =M-x clang-tags-mode=

   The mode-line should display a =ct= lighter indicating that the mode is
   active.

** Find symbol definitions

   Go to any symbol in the source file, and press =M-<dot>=.  A list of possible
   definition locations for the symbol should be displayed in a dedicated buffer
   called =*ct/find-def*=:
   #+include: "../../build/tests/ct-find-def-r.out" src ct/find-def-rw

   This buffer is a type of
   =compilation= buffer, meaning that all usual keys are available, especially:
   - =<tab>= and =S-<tab>=: move to the next/previous entry
   - =RET=: goto the location of the entry at point

** Find symbol references

   While in the =*ct/find-def*= buffer, press =M-<comma>= to get a list of all
   uses of the symbol identified by the entry at point. The symbol uses should
   be displayed in a dedicated buffer called =*ct/grep*=, looking like this:
   #+include: "../../build/tests/ct-grep.out" src grep-rw

   This buffer displays the same content as if you had grepped your
   source files for the symbol name, and filtered out all false positives
   (symbols with the same name, but in different contexts). The buffer uses
   Emacs' standard =grep= mode, meaning that all usual features are
   available. In particular, using =wgrep= in this buffer can be an efficient
   refactoring tool to rename a particular symbol.


* Read the user guide

  Learn more about clang-tags in the [[file:index.org][user manual]].
