{"name":"Clang-tags","tagline":"C/C++ source code indexing tool based on libclang","body":"# clang-tags\r\n\r\n`clang-tags` is a C / C++ source code indexing tool. Unlike many other indexing\r\ntools, `clang-tags` relies on the [clang](http://clang.llvm.org) compiler (via\r\nthe libclang interface) to analyse and index the source code base.\r\n\r\n\r\n## How to install\r\n\r\n\r\n### Requirements\r\n\r\n- `libclang` (>= 3.0)\r\n- `python` (>= 2.3)\r\n  - a version newer than 2.7 is recommended to benefit from the more recent `argparse` module.\r\n\r\n\r\n### Build\r\n\r\n`clang-tags` uses [`CMake`](http://www.cmake.org/) as a build system.\r\n\r\nA complete build process could for example look like this:\r\n\r\n```\r\ngit clone https://github.com/ffevotte/clang-tags.git src\r\nmkdir build && cd build\r\ncmake ../src\r\n```\r\n\r\n\r\n## How to use\r\n\r\n### Creating the compilation database\r\n\r\n#### From a `cmake` project\r\n\r\n`CMake` (since version 2.8.5) supports the generation of\r\n[JSON compilation databases](http://clang.llvm.org/docs/JSONCompilationDatabase.html) listing all\r\nnecessary information to build the project:\r\n\r\n```\r\ncmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ../src\r\n```\r\n\r\n#### Tracing the standard build process\r\n\r\n```\r\nclang-tags trace -- BUILD COMMAND\r\n```\r\n\r\nFor non-CMake-managed projects, there is no free way to build the compilation database. One way to\r\nget the necessary information consists in inspecting the build process as a black box using\r\n[strace](http://linux.die.net/man/1/strace) (also see [bear](https://github.com/rizsotto/Bear) for a\r\ntool using `LD_PRELOAD` to implement the same kind of strategy).\r\n\r\nSuch a method is inherently independant of the build process: Makefile (possibly\r\nautotools-generated), shell or python script, ... However, the downside with this approach is that\r\n`make` and other build systems traditionally only rebuild what's needed, and the generated\r\ncompilation database can thus be incomplete.\r\n\r\nExample usage:\r\n\r\n```\r\nmake clean                 # Ensure that the whole project will be rebuilt\r\nclang-tags trace -- make   # Generate the compilation database\r\n```\r\n\r\n#### Scanning `*.cxx` files\r\n\r\n```\r\nclang-tags scan SRC_DIR -- CLANG ARGS\r\n```\r\n\r\nFor relatively simple projects, it can be sufficient to simply scan the top sources directory to\r\nfind all `*.c` or `*.cxx` files, and additionally provide `clang-tags` with a set of command-line\r\narguments necessary for `clang` to parse these files. For example:\r\n\r\n```\r\nclang-tags scan ../src -- -I.\r\n```\r\n\r\n\r\n### Creating the index\r\n\r\n```\r\nclang-tags index [--emacs-conf SRC_DIR]\r\n```\r\n\r\nThis command uses the compilation database to index all source files. An\r\noptional argument `--emacs-conf` allows generating a suitable `.dir-local.el`\r\nemacs configuration file in the sources directory.\r\n\r\n\r\n```\r\nclang-tags update [--all]\r\n```\r\n\r\nThis command updates the index. With the optional `--all` switch, the\r\ncompilation database is also rebuilt using the same subcommand `trace` or\r\n`build` as previously.\r\n\r\n\r\n### Using the Emacs UI\r\n\r\nFirst, load the package using `M-x load-file RET path/to/clang-tags.el RET`\r\n\r\nWith the configuration file generated by the `clang-tags index` command, all\r\nC/C++ source files in the indexed source directory should automatically activate\r\n`clang-tags-mode` and have the `ct/default-directory` variable point to the\r\nindex directory.\r\n\r\n\r\n#### Find the definition of the symbol at point\r\n\r\nWhile in a source buffer, you can use `clang-tags` to find the location of the definition\r\nof the symbol under point by pressing `M-.`.\r\n\r\nThe list of relevant definitions is presented in a buffer, where pressing `RET` will take you to the\r\nlocation of the definition.\r\n\r\n#### Find all uses of a definition in the source base\r\n\r\nAfter having looked for a definition of the symbol under point, and while in the definitions list\r\nbuffer, press `M-,` to list all uses of the current definition in the source code base.\r\n\r\nResults are presented in a `grep-mode` buffer.\r\n\r\n\r\n## See also\r\n\r\n- [libclang API documentation](http://clang.llvm.org/doxygen/group__CINDEX.html)\r\n- [Doug Gregor's presentation on libclang](http://llvm.org/devmtg/2010-11/Gregor-libclang.pdf)\r\n- [clang-ctags](https://github.com/drothlis/clang-ctags): a similar project\r\n  using libclang to generate `ctags`/`etags` index files.\r\n\r\n\r\n## Contributing\r\n\r\nIf you make improvements to this code or have suggestions, please do not\r\nhesitate to fork the repository or submit bug reports on\r\n[github](https://github.com/ffevotte/clang-tags). The repository's URL is:\r\n\r\n    https://github.com/ffevotte/clang-tags.el.git\r\n\r\n\r\n## License\r\n\r\nCopyright (C) 2013 François Févotte.\r\n\r\nThis program is free software: you can redistribute it and/or modify it under\r\nthe terms of the GNU General Public License as published by the Free Software\r\nFoundation, either version 3 of the License, or (at your option) any later\r\nversion.\r\n\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY\r\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\r\nPARTICULAR PURPOSE. See the GNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License along with\r\nthis program. If not, see <http://www.gnu.org/licenses/>.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}