#! /usr/bin/python

"""
C and C++ source code base indexer using libclang.
"""

import os
import sys
import json
import shlex, subprocess
import time
import pickle

class CompilationCommand:
    """A clang compilation command, including directory and clang command-line
    arguments"""

    def __init__ (self, directory, clangArgs):
        self.directory = directory
        self.clangArgs = clangArgs


class ClangTagsDatabase:
    def __init__ (self, load = False):
        pass

    def updateCompilationCommands (self):
        self._clearCompilationCommands ()

        if self._getSourceType() == "json":
            self._readJsonDb ()
        elif self._getSourceType() == "scan":
            self._scanSourceFiles ()
        else:
            raise RuntimeError ("No source were given to populate the "
                                "compilation database.")

    def updateIndex (self, debug = False):
        "Create and populate a tags database"
        self.updateCompilationCommands ()

        self._pre_updateIndex()

        sourceFiles = {}

        for sourceFile in self._sourceFiles():
            compilationCommand = self._compilationCommand(sourceFile)
            command = ["clang-tags-index", "--"]
            command += compilationCommand.clangArgs

            sys.stderr.write ("%-70s\t" % (sourceFile + "..."))
            if debug is True:
                sys.stderr.write ("\n  " + " ".join (command) + "\n")

            begin = time.time()
            process = subprocess.Popen (command,
                                        cwd = compilationCommand.directory,
                                        stdout = subprocess.PIPE)

            for line in process.stdout:
                (usr, _, line) = line.partition (" ")
                (fileName, _, line) = line.partition (":")
                (lineNo, _, line) = line.partition (":")

                self._addTag (usr, fileName, lineNo, line)

                if fileName not in sourceFiles:
                    sourceFiles[fileName] = sourceFile

            process.wait ()
            sys.stderr.write ("%.2fs.\n" % (time.time() - begin))
            if debug is True:
                sys.stderr.write ("\n")

        self._post_updateIndex()

        for fileName in sourceFiles:
            if fileName not in self._sourceFiles():
                self._addHeader (fileName, sourceFiles[fileName])

        self._save ()

    def findDefinition (self, fileName, offset):
        compilationCommand = self._compilationCommand(fileName)

        command = ["clang-tags-def", fileName, offset, "--"]
        command += compilationCommand.clangArgs

        process = subprocess.Popen (command,
                                    cwd = compilationCommand.directory)
        process.wait()


    def setOptions (self, args):
        if args.sourceType == "json":
            self._setSource ("json", (args.json,))
        if args.sourceType == "scan":
            self._setSource ("scan", [args.srcdir] + args.clangArgs)


    def _readJsonDb (self):
        f = open (self._getSourceArgs()[0], "r")
        db = json.load (f)
        f.close()

        for compilationCommand in db:
            sourceFile = compilationCommand["file"]
            directory  = compilationCommand["directory"]
            command    = shlex.split(compilationCommand["command"])[1:]
            self._addCompilationCommand(sourceFile, directory, command)

    def _scanSourceFiles (self):
        srcdir = self._getSourceArgs()[0]
        clangArgs = self._getSourceArgs()[1:]

        for (root, dirs, files) in os.walk (srcdir):
            for fileName in files:
                if fileName.endswith (".cxx"):
                    sourceFile = os.path.realpath (os.path.join (root, fileName))
                    self._addCompilationCommand (sourceFile, ".", clangArgs + [sourceFile])

    # Interface for derived datatypes

    # Compilation commands
    def _sourceFiles (self):
        raise NotImplementedError
    def _clearCompilationCommands (self):
        raise NotImplementedError
    def _addCompilationCommand (self, sourceFile, directory, command):
        raise NotImplementedError
    def _compilationCommand (self, sourceFileName):
        raise NotImplementedError
    def _addHeader (self, includedFileName, sourceFileName):
        raise NotImplementedError

    # Indexing
    def _pre_updateIndex (self):
        raise NotImplementedError
    def _post_updateIndex (self):
        raise NotImplementedError
    def _addTag (self, usr, sourceFileName, lineNo, line):
        raise NotImplementedError
    def grep (self, usr):
        raise NotImplementedError

    # Options
    def _setSource (self, sourceType, sourceArgs):
        raise NotImplementedError
    def _getSourceType (self):
        raise NotImplementedError
    def _getSourceName (self):
        raise NotImplementedError

    # Data persistence
    def _save (self):
        raise NotImplementedError


class Store:
    def __init__ (self):
        self.sourceType = None
        self.sourceName = None
        self.compilationCommands = {}

class CTDB_File (ClangTagsDatabase):
    def __init__ (self, load = False):
        self.tagsFileName = ".ct.tags"
        self.dbFileName   = ".ct.db"

        ClangTagsDatabase.__init__ (self)
        if load:
            f = open (self.dbFileName, "r")
            self._store = pickle.load (f)
            f.close()
        else:
            self._store = Store()

        self._tagsFile = None

    def _sourceFiles (self):
        "List of all source files in the compilation database"
        return self._store.compilationCommands.keys()

    def _clearCompilationCommands (self):
        self._store.compilationCommands = {}

    def _addCompilationCommand (self, fileName, directory, command):
        self._store.compilationCommands[fileName] = \
            CompilationCommand (directory, command)

    def _compilationCommand (self, sourceFile):
        return self._store.compilationCommands[sourceFile]

    def _addHeader (self, headerFileName, sourceFileName):
        """Add a header file to the database by copying the compilation command
        of a source file which includes it"""
        self._store.compilationCommands[headerFileName] = \
            self._store.compilationCommands[sourceFileName]

    def _pre_updateIndex (self):
        self._tagsFile = open (self.tagsFileName, "w")

    def _post_updateIndex (self):
        self._tagsFile.close()

    def _addTag (self, usr, fileName, lineNo, line):
        self._tagsFile.write ("%s %s:%s:%s" % (usr, fileName, lineNo, line))

    def grep (self, usr):
        usr += " "
        tags = open (self.tagsFileName, "r")
        for line in tags:
            if line.startswith (usr):
                line = line.partition (" ")[2]
                print line
        tags.close()

    def _setSource (self, sourceType, sourceArgs):
        self._store.sourceType = sourceType
        self._store.sourceArgs = sourceArgs

    def _getSourceType (self):
        return self._store.sourceType

    def _getSourceArgs (self):
        return self._store.sourceArgs

    def _save (self):
        f = open (self.dbFileName, "w")
        pickle.dump (self._store, f)
        f.close()





def ctdbCreate (args):
    ctdb = CTDB_File ()
    ctdb.setOptions (args)
    return ctdb

def ctdbLoad ():
    return CTDB_File (load = True)

def index (args):
    "Entry point for indexing the source code base"
    ctdb = ctdbCreate (args)
    ctdb.updateIndex (debug = args.debug)

    if args.emacsConf is not None:
        f = open (os.path.join (args.emacsConf, ".dir-locals.el"), "w")
        f.write (
            ";; WARNING: this file has been automatically generated by clang-args\n"
            ";; any modification you do might be overwritten.\n"
            "((c++-mode\n"
            "  (ct/default-directory . \"%s\")))\n"
            % os.getcwd())
        f.close ()


def update (args):
    "Entry point for updating the source code base index"

    ctdb = ctdbLoad()
    ctdb.updateIndex(debug = args.debug)


def findDefinition (args):
    "Entry point for finding the definition of an identifier"
    fileName = os.path.realpath (args.fileName)
    offset   = args.offset

    ctdb = ctdbLoad()
    ctdb.findDefinition (fileName, offset)


def grep (args):
    ctdb = ctdbLoad()
    ctdb.grep (args.usr)


def main_argparse ():
    "Entry point for the application"

    parser = argparse.ArgumentParser (
        description = "Index a source code base using libclang.")

    parser.add_argument ("--debug", action = 'store_true',
                         help = "print debugging information")

    subparsers = parser.add_subparsers (metavar = "SUBCOMMAND")

    parserIndex = subparsers.add_parser (
        "index", help = "index source code base",
        description =
        "Create an index of all tags in the source code base.")
    parserIndex.add_argument (
        "--emacs-conf", metavar = "SRCDIR",
        dest = "emacsConf",
        help = "create an emacs configuration file in the top source files "
            "directory")
    parserIndex.set_defaults (fun = index)

    sp = parserIndex.add_subparsers (metavar = "SOURCE_TYPE",
                                     help = "keyword identifying the type of source:")
    parserIndexJson = sp.add_parser (
        "json",
        help = "clang \"compilation database\" in JSON format",
        description = "Create an index of all tags in the source code base. "
        "Source files and compilation commands are taken from a clang "
        "\"compilation database\" in JSON format.")
    parserIndexJson.add_argument ("json", metavar = "COMPILE_DB")
    parserIndexJson.set_defaults (sourceType = "json")

    parserIndexScan = sp.add_parser (
        "scan",
        help = "all `*.cxx` files under a top sources directory",
        description = "Create an index of all tags in the source code base. "
        "All `*.cxx` files found under the top sources directory are taken as "
        "source files. Additional clang arguments can optionally be provided.")
    parserIndexScan.add_argument ("srcdir", metavar = "TOP_SRCDIR",
                                  help = "top sources directory")
    parserIndexScan.add_argument ("clangArgs", metavar = "CLANG_ARGS",
                                  nargs = argparse.REMAINDER,
                                  help = "additional clang command-line arguments")
    parserIndexScan.set_defaults (sourceType = "scan")


    parserUpdate = subparsers.add_parser (
        "update",
        help = "update index",
        description =
        "Update the source code base index, using the same source as previous "
        "call to `index'")
    parserUpdate.set_defaults (fun = update)


    parserFindDef = subparsers.add_parser (
        "find-def",
        help = "find the definition of an identifier in a source file",
        description = "Find the definition location of an identifier in a "
        "source file.")
    parserFindDef.add_argument ("fileName", metavar = "FILE_NAME",
                                help = "source file name")
    parserFindDef.add_argument ("offset", metavar = "OFFSET",
                                help = "offset in bytes")
    parserFindDef.set_defaults (fun = findDefinition)


    parserGrep = subparsers.add_parser (
        "grep",
        help = "find all uses of a definition",
        description =
        "Find all uses of a definition, identified by its USR (Unified Symbol "
        "Resolution). Outputs results in a grep-like format.")
    parserGrep.add_argument ("usr", metavar = "USR",
                             help = "USR for the definition")
    parserGrep.set_defaults (fun = grep)


    args = parser.parse_args ()
    args.fun (args)


def main_optparse ():
    parser = optparse.OptionParser(
        usage = "usage: %prog SUBCOMMAND [options]",
        description = "Index a source code base using libclang. "
        "Please consult the full help on: https://github.com/ffevotte/clang-tags.")
    parser.add_option ("--debug", dest="debug", action = 'store_true',
                       help = "print debugging information")

    subcommand = sys.argv[1]
    if subcommand == "index":
        parser.add_option ("--emacs-conf", dest="emacsConf")
        sourceType = sys.argv[2]
        if sourceType == "json":
            (options, args) = parser.parse_args (sys.argv[3:])
            options.sourceType = "json"
            options.json = args[0]
            index(options)
        elif sourceType == "scan":
            (options, args) = parser.parse_args (sys.argv[3:])
            options.sourceType = "scan"
            options.srcdir = args[0]
            options.clangArgs = args[1:]
            index(options)
        else:
            sys.stderr.write ("unknown compilation commands source: %s\n" % sourceType)
            parser.print_help ()

    elif subcommand == "update":
        (options, args) = parser.parse_args (sys.argv[2:])
        update (options)

    elif subcommand == "find-def":
        (options, args) = parser.parse_args (sys.argv[2:])
        options.fileName = args[0]
        options.offset = args[1]
        findDefinition (options)

    elif subcommand == "grep":
        (options, args) = parser.parse_args (sys.argv[2:])
        options.usr = args[0]
        grep (options)

    else:
        sys.stderr.write ("unknown subcommand: %s\n" % subcommand)
        parser.print_help()

if __name__ == "__main__":
    try:
        import argparse
        main_argparse ()
    except ImportError:
        import optparse
        main_optparse ()
