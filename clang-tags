#! /usr/bin/python

"""
C and C++ source code base indexer using libclang.
"""

import os
import sys
import json
import shlex, subprocess
import time
import pickle
import re

class SourceFile:
    def __init__ (self, compileDirectory, compileArgs):
        self.compileDirectory = compileDirectory
        self.compileArgs = compileArgs
        self.lastIndexed = 0


class Project:
    def __init__ (self):
        self._options = None
        self._sourceFiles = {}
        self._includedFiles = {}

    def options (self, args = None):
        if args is None:
            return self._options
        else:
            self._options = args

    def addSourceFile (self, fileName, directory, command):
        if fileName not in self._sourceFiles:
            self._sourceFiles[fileName] = SourceFile (directory, command)
        else:
            sourceFile = self._sourceFiles[fileName]
            sourceFile.compileDirectory = directory
            sourceFile.compileArgs = command

    def sourceFiles (self):
        return self._sourceFiles.keys()

    def compilationCommand (self, fileName):
        if fileName in self._sourceFiles:
            return self._sourceFiles[fileName]
        else:
            for sourceFileName in self._sourceFiles:
                if fileName in self._includedFiles[sourceFileName]:
                    return self._sourceFiles[sourceFileName]
        raise RuntimeError ("Could not find file \"%s\" in the project" % fileName)

    def beginIndexing (self, fileName):
        self._sourceFiles[fileName].lastIndexed = time.time()
        self._includedFiles[fileName] = {}

    def addInclude (self, includedFileName, sourceFileName):
        self._includedFiles[sourceFileName][includedFileName] = True


class Index:
    def __init__ (self):
        self._tags = {}

    def addTag (self, usr, fileName, lineNo, line):
        if fileName not in self._tags:
            self._tags[fileName] = {}

        fileTags = self._tags[fileName]
        if usr not in fileTags:
            fileTags[usr] = []

        tags = fileTags[usr]
        line = "%s:%s:%s" % (fileName, lineNo, line)
        if line not in tags:
            fileTags[usr].append (line)

    def grep (self, usr):
        for fileName in self._tags:
            fileTags = self._tags[fileName]
            for line in fileTags.get(usr, []):
                print line,


class ClangTags:
    def __init__ (self):
        self._project = None
        self._index   = None

    def setProject (self, project):
        self._project = project

    def setIndex (self, index):
        self._index = index



    def updateProject (self):
        opts = self._project.options ()
        if opts.sourceType == "json":
            self._readJsonDb ()
        elif opts.sourceType == "scan":
            self._scanSourceFiles ()
        else:
            raise RuntimeError ("No source were given to populate the "
                                "compilation database.")

    def _readJsonDb (self):
        opts = self._project.options()
        f = open (opts.json, "r")
        db = json.load (f)
        f.close()

        for compilationCommand in db:
            sourceFile = compilationCommand["file"]
            directory  = compilationCommand["directory"]
            command    = shlex.split(compilationCommand["command"].encode())[1:]
            self._project.addSourceFile (sourceFile, directory, command)

    def _scanSourceFiles (self):
        opts = self._project.options()
        srcdir = opts.srcdir
        clangArgs = opts.clangArgs

        for (root, _, files) in os.walk (srcdir):
            for fileName in files:
                if fileName.endswith (".cxx"):
                    sourceFile = os.path.realpath (os.path.join (root, fileName))
                    self._project.addSourceFile (sourceFile, ".", clangArgs + [sourceFile])


    def updateIndex (self, debug = False):
        "Create and populate a tags database"

        for sourceFileName in self._project.sourceFiles():
            compilationCommand = self._project.compilationCommand (sourceFileName)

            command = ["clang-tags-index", "--"]
            command += compilationCommand.compileArgs

            sys.stderr.write ("%-70s\t" % (sourceFileName + "..."))
            if debug is True:
                sys.stderr.write ("\n  " + " ".join (command) + "\n")

            begin = time.time()
            self._project.beginIndexing (sourceFileName)

            process = subprocess.Popen (command,
                                        cwd = compilationCommand.compileDirectory,
                                        stdout = subprocess.PIPE)

            for line in process.stdout:
                (usr, _, line) = line.partition (" ")
                (fileName, _, line) = line.partition (":")
                (lineNo, _, line) = line.partition (":")

                self._index.addTag (usr, fileName, lineNo, line)
                self._project.addInclude (fileName, sourceFileName)

            process.wait ()
            sys.stderr.write ("%.2fs.\n" % (time.time() - begin))
            if debug is True:
                sys.stderr.write ("\n")

    def findDefinition (self, fileName, offset):
        compilationCommand = self._project.compilationCommand(fileName)

        command = ["clang-tags-def", fileName, offset, "--"]
        command += compilationCommand.compileArgs

        process = subprocess.Popen (command,
                                    cwd = compilationCommand.compileDirectory)
        process.wait()

    def grep (self, usr):
        self._index.grep (usr)

def save (obj, fileName):
    f = open (fileName, "w")
    pickle.dump (obj, f)
    f.close ()

def load (fileName):
    f = open (fileName, "r")
    res = pickle.load (f)
    f.close()
    return res

def trace (args):
    def execve (programName, command):
        return (programName, command)

    def endsWithOne (string, suffixes):
        for suffix in suffixes:
            if string.endswith(suffix):
                return True
        return False

    compilers  = ["gcc", "g++", "c++", "clang", "clang++"]
    extensions = [".c", ".cxx", ".cc", ".C"]

    command  = ["strace", "-f", "-s256", "-etrace=execve,chdir", "-q"]
    command += args.command

    p = subprocess.Popen (command,
                          stderr = subprocess.PIPE)

    sourceFiles = {}
    cwd = os.getcwd()

    chdir_re = re.compile ("\[pid \d+\] chdir\((.*)\) = 0")
    exec_re  = re.compile ("\[pid \d+\] (execve\(.*\)) = 0")

    for line in p.stderr:

        m = chdir_re.match (line)
        if m is not None:
            cwd = eval(m.group(1))
            continue

        m = exec_re.match (line)
        if m is not None:
            command = None
            sourceFile = None

            line = m.group(1)
            line = line.replace('"...', '"')
            line = re.sub(", \[/\* [^*]+ \*/\]", "", line)

            (programName, command) = eval(line)
            if endsWithOne(programName, [ "/" + c for c in compilers]):
                for arg in command:
                    if endsWithOne (arg, extensions):
                        sourceFiles[arg] = (cwd, command)
                        break
    p.wait()

    compilationDb = []
    for sourceFile in sourceFiles:
        (directory, command) = sourceFiles[sourceFile]
        compilationDb.append ({"file": sourceFile,
                               "directory": directory,
                               "command": subprocess.list2cmdline(command)})
    f = open ("compile_commands.json", "w")
    json.dump(compilationDb, f,
              indent=4)
    f.close()


def index (args):
    "Entry point for indexing the source code base"
    p = Project()
    p.options(args)

    ct = ClangTags()
    ct.setProject (p)
    ct.updateProject()

    ct.setIndex (Index())
    ct.updateIndex(debug = args.debug)

    save (ct._project, ".ct.db")
    save (ct._index, ".ct.tags")

    if args.emacsConf is not None:
        f = open (os.path.join (args.emacsConf, ".dir-locals.el"), "w")
        f.write (
            ";; WARNING: this file has been automatically generated by clang-args\n"
            ";; any modification you do might be overwritten.\n"
            "((c++-mode\n"
            "  (eval . (clang-tags-mode 1))\n"
            "  (ct/default-directory . \"%s\")))\n"
            % os.getcwd())
        f.close ()


def update (args):
    "Entry point for updating the source code base index"

    ct = ClangTags()
    ct.setProject (load (".ct.db"))
    ct.setIndex (load (".ct.tags"))
    ct.updateIndex(debug = args.debug)


def findDefinition (args):
    "Entry point for finding the definition of an identifier"
    fileName = os.path.realpath (args.fileName)
    offset   = args.offset

    ct = ClangTags()
    ct.setProject (load (".ct.db"))
    ct.findDefinition (fileName, offset)


def grep (args):
    "Entry point fir finding the uses of a definition"
    ct = ClangTags()
    ct.setProject (load (".ct.db"))
    ct.setIndex (load (".ct.tags"))
    ct.grep (args.usr)


def main_argparse ():
    "Entry point for the application"

    parser = argparse.ArgumentParser (
        description = "Index a source code base using libclang.")

    parser.add_argument ("--debug", action = 'store_true',
                         help = "print debugging information")

    subparsers = parser.add_subparsers (metavar = "SUBCOMMAND")

    parserTrace = subparsers.add_parser (
        "trace", help = "trace a build command",
        description = "Create a compilation database by tracing a build command.")
    parserTrace.add_argument (
        "command", metavar = "COMMAND",
        help = "build command line")
    parserTrace.set_defaults (fun = trace)

    parserIndex = subparsers.add_parser (
        "index", help = "index source code base",
        description =
        "Create an index of all tags in the source code base.")
    parserIndex.add_argument (
        "--emacs-conf", metavar = "SRCDIR",
        dest = "emacsConf",
        help = "create an emacs configuration file in the top source files "
            "directory")
    parserIndex.set_defaults (fun = index)

    sp = parserIndex.add_subparsers (metavar = "SOURCE_TYPE",
                                     help = "keyword identifying the type of source:")
    parserIndexJson = sp.add_parser (
        "json",
        help = "clang \"compilation database\" in JSON format",
        description = "Create an index of all tags in the source code base. "
        "Source files and compilation commands are taken from a clang "
        "\"compilation database\" in JSON format.")
    parserIndexJson.add_argument ("json", metavar = "COMPILE_DB")
    parserIndexJson.set_defaults (sourceType = "json")

    parserIndexScan = sp.add_parser (
        "scan",
        help = "all `*.cxx` files under a top sources directory",
        description = "Create an index of all tags in the source code base. "
        "All `*.cxx` files found under the top sources directory are taken as "
        "source files. Additional clang arguments can optionally be provided.")
    parserIndexScan.add_argument ("srcdir", metavar = "TOP_SRCDIR",
                                  help = "top sources directory")
    parserIndexScan.add_argument ("clangArgs", metavar = "CLANG_ARGS",
                                  nargs = argparse.REMAINDER,
                                  help = "additional clang command-line arguments")
    parserIndexScan.set_defaults (sourceType = "scan")


    parserUpdate = subparsers.add_parser (
        "update",
        help = "update index",
        description =
        "Update the source code base index, using the same source as previous "
        "call to `index'")
    parserUpdate.set_defaults (fun = update)


    parserFindDef = subparsers.add_parser (
        "find-def",
        help = "find the definition of an identifier in a source file",
        description = "Find the definition location of an identifier in a "
        "source file.")
    parserFindDef.add_argument ("fileName", metavar = "FILE_NAME",
                                help = "source file name")
    parserFindDef.add_argument ("offset", metavar = "OFFSET",
                                help = "offset in bytes")
    parserFindDef.set_defaults (fun = findDefinition)


    parserGrep = subparsers.add_parser (
        "grep",
        help = "find all uses of a definition",
        description =
        "Find all uses of a definition, identified by its USR (Unified Symbol "
        "Resolution). Outputs results in a grep-like format.")
    parserGrep.add_argument ("usr", metavar = "USR",
                             help = "USR for the definition")
    parserGrep.set_defaults (fun = grep)


    args = parser.parse_args ()
    args.fun (args)


def main_optparse ():
    parser = optparse.OptionParser(
        usage = "usage: %prog SUBCOMMAND [options]",
        description = "Index a source code base using libclang. "
        "Please consult the full help on: https://github.com/ffevotte/clang-tags.")
    parser.add_option ("--debug", dest="debug", action = 'store_true',
                       help = "print debugging information")

    subcommand = sys.argv[1]
    if subcommand == "trace":
        (options, args) = parser.parse_args (sys.argv[2:])
        options.command = args
        trace (options)

    elif subcommand == "index":
        parser.add_option ("--emacs-conf", dest="emacsConf")
        sourceType = sys.argv[2]
        if sourceType == "json":
            (options, args) = parser.parse_args (sys.argv[3:])
            options.sourceType = "json"
            options.json = args[0]
            index (options)
        elif sourceType == "scan":
            (options, args) = parser.parse_args (sys.argv[3:])
            options.sourceType = "scan"
            options.srcdir = args[0]
            options.clangArgs = args[1:]
            index (options)
        else:
            sys.stderr.write ("unknown compilation commands source: %s\n" % sourceType)
            parser.print_help ()

    elif subcommand == "update":
        (options, args) = parser.parse_args (sys.argv[2:])
        update (options)

    elif subcommand == "find-def":
        (options, args) = parser.parse_args (sys.argv[2:])
        options.fileName = args[0]
        options.offset = args[1]
        findDefinition (options)

    elif subcommand == "grep":
        (options, args) = parser.parse_args (sys.argv[2:])
        options.usr = args[0]
        grep (options)

    else:
        sys.stderr.write ("unknown subcommand: %s\n" % subcommand)
        parser.print_help()

if __name__ == "__main__":
    try:
        import argparse
        main_argparse ()
    except ImportError:
        import optparse
        main_optparse ()
