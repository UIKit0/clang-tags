#! /usr/bin/python -O

"""
C and C++ source code base indexer using libclang.
"""

import os
import sys
import json
import shlex, subprocess
import time
import re
import types

import sqlite3
class SQLiteStore:
    """SQLite backend for ClangTags data storage"""

    def __init__ (self):
        self._conn = sqlite3.connect ('.ct.sqlite')
        self._db = self._conn.cursor()
        self._db.execute ('CREATE TABLE IF NOT EXISTS options ('
                          '  command   TEXT,'
                          '  arguments TEXT'
                          ')')
        self._db.execute ('CREATE TABLE IF NOT EXISTS files ('
                          '  id          INTEGER PRIMARY KEY,'
                          '  name        TEXT,'
                          '  lastIndexed INTEGER,'
                          '  included    INTEGER'
                          ')')
        self._db.execute ('CREATE TABLE IF NOT EXISTS commands ('
                          '  fileId     INTEGER REFERENCES files(id),'
                          '  directory  TEXT,'
                          '  args       TEXT'
                          ')')
        self._db.execute ('CREATE TABLE IF NOT EXISTS includes ('
                          '  sourceId   INTEGER REFERENCES files(id),'
                          '  includedId INTEGER REFERENCES files(id)'
                          ')')
        self._db.execute ('CREATE TABLE IF NOT EXISTS tags ('
                          '  fileId   INTEGER REFERENCES files(id),'
                          '  usr      TEXT,'
                          '  kind     TEXT,'
                          '  line1    INTEGER,'
                          '  col1     INTEGER,'
                          '  offset1  INTEGER,'
                          '  line2    INTEGER,'
                          '  col2     INTEGER,'
                          '  offset2  INTEGER,'
                          '  isDecl   BOOLEAN'
                          ')')

    def _fileId (self, fileName):
        """Return the id of a file in the database, or None if the file is not
        present."""
        self._db.execute ('SELECT * FROM files WHERE name=?', (fileName,))
        row = self._db.fetchone()
        if row is None:
            return None
        else:
            return row[0]

    def _addFile (self, fileName, included=False):
        "Add a file to the database if not present. Returns its id."
        fileId = self._fileId(fileName)
        if fileId is None:
            self._db.execute ('INSERT INTO files VALUES (NULL, ?, 0, ?)',
                              (fileName, included))
            fileId = self._db.lastrowid
        return fileId

    def _includer (self, includedId):
        "Select a source file which a header file is included."
        self._db.execute ('SELECT source.name FROM includes '
                          'INNER JOIN files AS source ON sourceId = source.id '
                          'WHERE includedId = ?',
                          (includedId,))
        return self._db.fetchone()[0]

    def setOptions (self, command, args):
        "Store the command-line arguments given for `command`."
        s = str(args2dict(args))
        self._db.execute ('DELETE FROM options WHERE command=?', (command,))
        self._db.execute ('INSERT INTO options VALUES (?,?)',
                          (command, s))

    def getOptions (self, command):
        "Get the last command-line arguments used for `command`."
        self._db.execute ('SELECT * FROM options WHERE command=?', (command,))
        row = self._db.fetchone()
        if row is None:
            return None
        else:
            return dict2args(eval(row[1]))

    def addSourceFile (self, fileName, directory, command):
        "Add a source file (with its compilation command) to the project."
        fileId = self._addFile (fileName)
        self._db.execute ('DELETE FROM commands WHERE fileId=?', (fileId,))
        self._db.execute ('INSERT INTO commands VALUES (?,?,?)',
                          (fileId, directory, str(command)))

    def compilationCommand (self, fileName):
        """Return the compilation command for a source file as a (directory,
        args) tuple.  In case of a header file, select a source file including
        it and return the relevant compilation command."""
        fileId = self._fileId (fileName)
        self._db.execute ('SELECT * FROM commands WHERE fileId=?', (fileId,))
        row = self._db.fetchone()
        if row is None:
            return self.compilationCommand (self._includer (fileId))
        directory = row[1]
        args = eval(row[2])
        return (directory, args)

    def addInclude (self, includedFile, sourceFile):
        "Add an included file to the project."
        sourceId = self._fileId (sourceFile)
        includedId = self._fileId (includedFile)
        self._db.execute ('DELETE FROM includes '
                          'WHERE sourceId = ? '
                          '  AND includedId = ?',
                          (sourceId, includedId))
        self._db.execute ('INSERT INTO includes VALUES (?,?)',
                          (sourceId, includedId))

    def nextFile (self):
        """Select the next file to be updated. Main source files are selected
        first; if an included file remains to be updated, return a source file
        including it."""
        self._db.execute ('SELECT * FROM files ORDER BY included')
        for row in self._db.fetchall():
            fileId = row[0]
            fileName = row[1]
            lastIndexed = row[2]
            included = row[3]
            lastModified = os.stat(fileName).st_mtime
            if lastModified > lastIndexed:
                if included == 0:
                    return fileName
                else:
                    return self._includer (fileId)
        return None

    def beginIndex (self):
        """Begin creating the index."""
        self._db.execute ('DELETE FROM tags')
        self._db.execute ('UPDATE files SET lastIndexed = 0')

    def beginFile (self, fileName, included):
        """Begin indexing a file. The file is added to the project. If it needs
        updating, associated tags are deleted and True is returned. Otherwise,
        return False."""
        fileId = self._addFile (fileName, included)
        self._db.execute ("SELECT * FROM files WHERE name = ?",
                          (fileName,))
        row = self._db.fetchone()
        lastIndexed = row[2]
        lastModified = os.stat(fileName).st_mtime
        if lastModified > lastIndexed:
            self._db.execute ('DELETE FROM tags WHERE fileId = ?', (fileId,))
            self._db.execute ('DELETE FROM includes WHERE sourceId = ?', (fileId,))
            self._db.execute ('UPDATE files '
                              'SET lastIndexed = ? '
                              'WHERE id = ?',
                              (time.time(), fileId))
            return True
        else:
            return False

    def addTag (self, data):
        """Add a tag to the database."""
        (usr, kind, fileName,
         line1, col1, offset1,
         line2, col2, offset2,
         isDecl, _) = data

        line1 = int(line1)
        offset1 = int(offset1)
        offset2 = int(offset2)

        self._db.execute ('SELECT * FROM files WHERE name=?', (fileName,))
        res = self._db.fetchone()
        fileId = res[0]

        self._db.execute ('SELECT * FROM tags '
                          'WHERE fileId=?'
                          '  AND usr=?'
                          '  AND offset1=?'
                          '  AND offset2=?',
                          (fileId, usr, offset1, offset2))
        if self._db.fetchone() is None:
            self._db.execute ('INSERT INTO tags VALUES (?,?,?,?,?,?,?,?,?,?)',
                              (fileId, usr, kind,
                               line1, col1, offset1,
                               line2, col2, offset2,
                               isDecl))

    def grep (self, usr):
        """Return all uses of a definition (as identified by its USR) in the
        project. Output results in a grep-like format."""
        self._db.execute ('SELECT files.name, tags.line1 FROM tags '
                          'INNER JOIN files ON files.id = tags.fileId '
                          'WHERE tags.usr=?',
                          (usr,))
        for row in self._db.fetchall():
            fileName = row[0]
            line1 = row[1]
            line = extractLine (fileName, line1)
            print "%s:%d:%s" % (fileName, line1, line),

    def findDefinition (self, fileName, offset):
        "Find in the index the definition of identifier at point."
        self._db.execute ('SELECT tags.usr, tags.offset1, tags.offset2, tags.kind '
                          'FROM tags '
                          'INNER JOIN files ON files.id = tags.fileId '
                          'WHERE files.name = ? '
                          '  AND tags.offset1 <= ? '
                          '  AND tags.offset2 >= ? '
                          'ORDER BY (offset2 - offset1)',
                          (fileName, offset, offset))
        rows = self._db.fetchall()
        usrList = []
        for row in rows:
            (usr, offset1, offset2, kind) = row
            if usr in usrList:
                continue

            usrList.append(usr)
            spelling = extractRegion (fileName, offset1, offset2)
            self._db.execute ('SELECT files.name, '
                              '       tags.line1, tags.line2, '
                              '       tags.col1,  tags.col2, '
                              '       tags.kind '
                              'FROM tags '
                              'INNER JOIN files ON files.id = tags.fileId '
                              'WHERE isDecl = 1 '
                              '  AND usr = ?',
                              (usr,))
            rows2 = self._db.fetchall()
            if rows2 == []:
                print "-- %s -- %s"  % (spelling, kind)
                print "   <non indexed>"
            else:
                kind = rows2[0][5]
                print "-- %s -- %s"  % (spelling, kind)
                for row2 in rows2:
                    print "   %s:%d-%d:%d-%d: " % row2[:5]

            print "   USR: %s" % usr
            print ""

    def save (self):
        "Commit and save all changes to the database."
        self._conn.commit()
        self._conn.close()

    def dump (self):
        "Dump the database on screen for debugging purposes."
        def dumpSQL (title, sql):
            print "\n\n## %s\n" % title
            self._db.execute (sql)
            for row in self._db.fetchall():
                print " ; ".join([str(e) for e in row])
        dumpSQL ("Options", 'SELECT * FROM options')
        dumpSQL ("Commands", 'SELECT files.name, commands.* FROM commands '
                 'INNER JOIN files ON files.id = commands.fileId')
        dumpSQL ("Includes", 'SELECT source.name, included.name FROM includes '
                 'INNER JOIN files AS source ON source.id = includes.sourceId '
                 'INNER JOIN files AS included ON included.id = includes.includedId')
        dumpSQL ("Tags", 'SELECT files.name, tags.* FROM tags '
                 'INNER JOIN files ON files.id = tags.fileId')



class ClangTags:
    """The main class, implementing project management and tagging
    algorithms."""

    def __init__ (self):
        self._store   = SQLiteStore()

    def save (self):
        "Save the internal state of clang-tags."
        self._store.save()

    def options (self, action, args = None):
        "Set or get the command-line options used for a given action."
        if args is None:
            return self._store.getOptions (action)
        else:
            return self._store.setOptions (action, args)

    def updateProject (self):
        """Update the project (i.e. the set of source files and associated
        compilation commands)."""
        opts = self._store.getOptions("index")
        f = open (opts.input, "r")
        db = json.load (f)
        f.close()

        for compilationCommand in db:
            sourceFile = os.path.realpath(compilationCommand["file"])
            directory  = compilationCommand["directory"]
            command    = shlex.split(compilationCommand["command"].encode())[1:]
            self._store.addSourceFile (sourceFile, directory, command)

    def beginIndex (self):
        self._store.beginIndex()

    def updateIndex (self, debug = False):
        "Create and populate a tags database"

        opts = self._store.getOptions("index")

        while True:
            sourceFileName = self._store.nextFile()
            if sourceFileName is None:
                break

            needsUpdate = {}
            needsUpdate[sourceFileName] = \
                self._store.beginFile (sourceFileName, 0)

            (compileDirectory, compileArgs) = \
                self._store.compilationCommand (sourceFileName)

            command = ["clang-tags-index"]
            for path in opts.exclude:
                command += ["--exclude", path]
            command += ["--"] + compileArgs

            sys.stderr.write ("%-70s\t" % (sourceFileName + "..."))
            if debug is True:
                sys.stderr.write ("\n  " + " ".join (command) + "\n")

            begin = time.time()

            process = subprocess.Popen (command,
                                        cwd = compileDirectory,
                                        stdout = subprocess.PIPE)

            tagData = range(11)
            index = -1
            for line in process.stdout:
                index += 1
                tagData[index] = line.strip()
                if index == 10:
                    fileName = tagData[2]
                    sep = tagData[10]
                    index = -1

                    assert sep == "--"

                    if fileName not in needsUpdate:
                        self._store.addInclude (fileName, sourceFileName)
                        needsUpdate[fileName] = self._store.beginFile (fileName, 1)

                    if needsUpdate[fileName]:
                        self._store.addTag (tagData)

            process.wait ()
            sys.stderr.write ("%.2fs.\n" % (time.time() - begin))
            if debug is True:
                sys.stderr.write ("\n")

    def findDefinition (self, fileName, offset, fromIndex = True):
        """Find the definition of the identifier at point. If fromIndex is True,
        get the information in the index; otherwise, call `clang-tags-def`."""
        if fromIndex is True:
            self._store.findDefinition (fileName, offset)
        else:
            (compileDirectory, compileArgs) = \
                self._store.compilationCommand(fileName)

            command = ["clang-tags-def", fileName, offset, "--"]
            command += compileArgs

            process = subprocess.Popen (command,
                                        cwd = compileDirectory,
                                        stdout = subprocess.PIPE)
            buf = []
            for line in process.stdout:
                if line.startswith("--"):
                    buf.append("")
                buf[-1] += line
            process.wait()

            l = len(buf)
            for i in xrange(l):
                print "%s" % buf[l-i-1],

    def grep (self, usr):
        """Find all uses of a definition (as identified by its USR) in the
        project. Output results in a grep-like format."""
        self._store.grep (usr)


### Helper functions
def endsWithOne (string, suffixes):
    "Return True iff STRING ends with one of SUFFIXES."
    for suffix in suffixes:
        if string.endswith(suffix):
            return True
    return False

def extractLine (fileName, lineNo):
    "Extract the contents of line LINENO in file FILENAME."
    f = open (fileName, "r")
    for i in xrange (lineNo):
        line = f.readline()
    f.close()
    return line

def extractRegion (fileName, offset1, offset2):
    """Extract the contents of the region between offsets OFFSET1 and OFFSET2
    (in bytes) in file FILENAME."""
    f = open (fileName, "r")
    f.seek(offset1)
    region = f.read (offset2-offset1)
    f.close()
    region = re.sub ("\s+", " ", region)
    if len(region) > 40:
        region = region[:37] + "..."
    return region[:40]

def args2dict (args):
    d = {}
    for attr in dir (args):
        if not (attr.startswith("_")
                or type(getattr(args, attr)) is types.MethodType
                or type(getattr(args, attr)) is types.FunctionType):
            d[attr] =  getattr(args, attr)
    return d

class Options:
    pass
def dict2args (d):
    args = Options()
    for attr in d:
        setattr(args, attr, d[attr])
    return args


### Entry points for the subcommands

def trace (args):
    """Entry point for generating a compilation database by tracing a build
    command."""
    ct = ClangTags()
    ct.options ("source", args)
    ct.save()

    compilers  = ["gcc", "g++", "c++", "clang", "clang++"]
    extensions = [".c", ".cxx", ".cc", ".C"]

    command  = ["strace", "-f", "-s256", "-etrace=execve,chdir", "-q"]
    command += args.command

    p = subprocess.Popen (command,
                          stderr = subprocess.PIPE)

    sourceFiles = {}
    cwd = os.getcwd()

    chdir_re = re.compile ("\[pid\s+\d+\] chdir\((.*)\) = 0")
    exec_re  = re.compile ("\[pid\s+\d+\] execve(\(.*\)) = ")

    for line in p.stderr:

        m = chdir_re.match (line)
        if m is not None:
            cwd = eval(m.group(1))
            continue

        m = exec_re.match (line)
        if m is not None:
            command = None
            sourceFile = None

            line = m.group(1)
            line = line.replace('"...', '"')
            line = re.sub(", \[/\* [^*]+ \*/\]", "", line)

            (programName, command) = eval(line)
            if endsWithOne(programName, [ "/" + c for c in compilers]):
                for arg in command:
                    if endsWithOne (arg, extensions) and os.path.exists (arg):
                        sourceFiles[arg] = (cwd, command)
                        break
    p.wait()

    compilationDb = []
    for sourceFile in sourceFiles:
        (directory, command) = sourceFiles[sourceFile]
        compilationDb.append ({"file": sourceFile,
                               "directory": directory,
                               "command": subprocess.list2cmdline(command)})
    f = open ("compile_commands.json", "w")
    json.dump(compilationDb, f,
              indent=4)
    f.close()


def scan (args):
    """Entry point for generating a compilation database by scanning a sources
    directory."""
    ct = ClangTags()
    ct.options ("source", args)
    ct.save()

    srcdir = args.srcdir
    clangArgs = args.clangArgs
    compiler = args.compiler

    compilationDb = []
    for (root, _, files) in os.walk (srcdir):
        for fileName in files:
            if endsWithOne (fileName, [".c", ".cxx", ".cc", ".C"]):
                sourceFile = os.path.realpath (os.path.join (root, fileName))
                command  = "%s %s" % (compiler, sourceFile)
                command += " " + subprocess.list2cmdline(clangArgs)
                compilationDb.append({"file": sourceFile,
                                      "directory": ".",
                                      "command": command})
    f = open ("compile_commands.json", "w")
    json.dump(compilationDb, f,
              indent=4)
    f.close()


def index (args):
    "Entry point for indexing the source code base"

    ct = ClangTags ()
    ct.options ("index", args)
    ct.updateProject()
    ct.beginIndex()
    ct.updateIndex (debug = args.debug)
    ct.save()

    if args.emacsConf is not None:
        f = open (os.path.join (args.emacsConf, ".dir-locals.el"), "w")
        f.write (
            ";; WARNING: this file has been automatically generated by clang-args\n"
            ";; any modification you do might be overwritten.\n"
            "((c++-mode\n"
            "  (eval . (clang-tags-mode 1))\n"
            "  (ct/default-directory . \"%s\")))\n"
            % os.getcwd())
        f.close ()


def update (args):
    "Entry point for updating the source code base index"

    ct = ClangTags()

    if args.all is True:
        argsSource = ct.options("source")
        if argsSource is not None:
            argsSource.fun (argsSource)

    ct.updateIndex(debug = args.debug)
    ct.save()


def findDefinition (args):
    "Entry point for finding the definition of an identifier"
    fileName = os.path.realpath (args.fileName)
    offset   = args.offset

    ct = ClangTags()
    ct.findDefinition (fileName, offset, args.fromIndex)


def grep (args):
    "Entry point for finding the uses of a definition"
    ct = ClangTags()
    ct.grep (args.usr)


def dump (args):
    ct = ClangTags()
    ct._store.dump()


def main_argparse ():
    "Entry point for the application"

    parser = argparse.ArgumentParser (
        description = "Index a source code base using libclang.")

    parser.add_argument ("--debug", "-d", action = 'store_true',
                         help = "print debugging information")

    subparsers = parser.add_subparsers (metavar = "SUBCOMMAND")

    parserTrace = subparsers.add_parser (
        "trace", help = "trace a build command",
        description =
        "Create a compilation database by tracing a build command.")
    parserTrace.add_argument (
        "command",
        metavar = "COMMAND",
        nargs = argparse.REMAINDER,
        help = "build command line")
    parserTrace.set_defaults (sourceType = "trace")
    parserTrace.set_defaults (fun = trace)

    parserScan = subparsers.add_parser (
        "scan", help = "scan a source directory",
        description =
        "Create a compilation database by scanning a source directory")
    parserScan.add_argument ("--compiler", "-c",
                             default = "gcc",
                             help = "compiler name (default: gcc)")
    parserScan.add_argument ("srcdir",
                             help = "top sources directory")
    parserScan.add_argument ("clangArgs",
                             metavar = "CLANG_ARGS",
                             nargs = argparse.REMAINDER,
                             help = "additional clang command-line arguments")
    parserScan.set_defaults (sourceType = "scan")
    parserScan.set_defaults (fun = scan)


    parserIndex = subparsers.add_parser (
        "index", help = "index source code base",
        description = "Create an index of all tags in the source code base."
        " Source files and compilation commands are taken from a clang"
        " \"compilation database\" in JSON format.")
    parserIndex.add_argument (
        "--input", "-i",
        default = "compile_commands.json",
        help = "compilation database (default: compile_commands.json)")
    parserIndex.add_argument (
        "--exclude", "-e",
        metavar = "DIR",
        action = "append",
        help = "do not index files under DIR")
    parserIndex.add_argument (
        "--exclude-clear", "-E",
        dest="exclude",
        action="store_const", const=[],
        help = "reset exclude list")
    parserIndex.add_argument (
        "--emacs-conf",
        metavar = "SRCDIR",
        dest = "emacsConf",
        help = "create an emacs configuration file in the top source files"
        " directory")
    parserIndex.set_defaults (exclude = ["/usr"])
    parserIndex.set_defaults (fun = index)


    parserUpdate = subparsers.add_parser (
        "update",
        help = "update index",
        description =
        "Update the source code base index, using the same arguments as "
        "previous call to `index'")
    parserUpdate.add_argument (
        "--all", "-a",
        action = "store_true",
        help = "also update the compilation database")
    parserUpdate.set_defaults (fun = update)


    parserFindDef = subparsers.add_parser (
        "find-def",
        help = "find the definition of an identifier in a source file",
        description = "Find the definition location of an identifier in a "
        "source file.")
    parserFindDef.add_argument ("fileName", metavar = "FILE_NAME",
                                help = "source file name")
    parserFindDef.add_argument ("offset", metavar = "OFFSET",
                                help = "offset in bytes")
    parserFindDef.add_argument ("--index", "-i",
                                dest = "fromIndex",
                                action = "store_true",
                                help = "look for the definition in the index")
    parserFindDef.add_argument ("--recompile", "-r",
                                dest = "fromIndex",
                                action = "store_false",
                                help =
                                "recompile the file to find the definition")
    parserFindDef.set_defaults (fromIndex = True)
    parserFindDef.set_defaults (fun = findDefinition)


    parserGrep = subparsers.add_parser (
        "grep",
        help = "find all uses of a definition",
        description =
        "Find all uses of a definition, identified by its USR (Unified Symbol "
        "Resolution). Outputs results in a grep-like format.")
    parserGrep.add_argument ("usr",
                             metavar = "USR",
                             help = "USR for the definition")
    parserGrep.set_defaults (fun = grep)


    parserDebug = subparsers.add_parser (
        "debug",
        help = "Some debugging features")
    subparserDebug = parserDebug.add_subparsers(metavar = "SUBCOMMAND")
    parserDebugDump = subparserDebug.add_parser (
        "dump",
        help = "dump database information.")
    parserDebugDump.set_defaults (fun = dump)


    args = parser.parse_args ()
    args.fun (args)


def main_optparse ():
    """Main entry point for the application, used for python <2.7 when argparse
    is not available."""

    parser = optparse.OptionParser(
        usage = "usage: %prog SUBCOMMAND [options]",
        description = "Index a source code base using libclang. "
        "Please consult the full help on: https://github.com/ffevotte/clang-tags.")
    parser.add_option ("--debug", dest="debug", action = 'store_true',
                       help = "print debugging information")

    subcommand = sys.argv[1]
    if subcommand == "trace":
        (options, args) = parser.parse_args (sys.argv[2:])
        options.command = args
        options.fun = trace
        trace (options)

    elif subcommand == "scan":
        parser.add_option ("--compiler", "-c", default = "gcc")
        (options, args) = parser.parse_args (sys.argv[2:])
        options.srcdir = args[0]
        options.clangArgs = args[1:]
        options.fun = scan
        scan (options)

    elif subcommand == "index":
        parser.add_option ("--emacs-conf", dest="emacsConf")
        parser.add_option ("--input", "-i", default = "compile_commands.json")
        parser.add_option ("--exclude-clear", "-E", dest="exclude",
                           action="store_const", const=[])
        parser.add_option ("--exclude", "-e", action="append")
        parser.set_defaults (exclude = ["/usr"])
        (options, args) = parser.parse_args (sys.argv[2:])
        index (options)

    elif subcommand == "update":
        parser.add_option ("--all", "-a", action = "store_true")
        (options, args) = parser.parse_args (sys.argv[2:])
        update (options)

    elif subcommand == "find-def":
        parser.add_option ("--index", "-i",
                           dest = "fromIndex",
                           action = "store_true")
        parser.add_option ("--recompile", "-r",
                           dest = "fromIndex",
                           action = "store_false")
        parser.set_defaults (fromIndex = True)
        (options, args) = parser.parse_args (sys.argv[2:])
        options.fileName = args[0]
        options.offset = args[1]
        findDefinition (options)

    elif subcommand == "grep":
        (options, args) = parser.parse_args (sys.argv[2:])
        options.usr = args[0]
        grep (options)

    elif subcommand == "debug":
        subcommand = sys.argv[2]
        if subcommand == "dump":
            dump(None)
        else:
            sys.stderr.write ("invalid command line\n")

    else:
        sys.stderr.write ("unknown subcommand: %s\n" % subcommand)
        parser.print_help()

if __name__ == "__main__":
    try:
        import argparse
        main_argparse ()
    except ImportError:
        import optparse
        main_optparse ()
